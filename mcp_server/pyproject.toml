[project]
name = "mcp-server"
version = "0.4.0"
description = "Graphiti MCP Server"
readme = "README.md"
requires-python = ">=3.10,<4"
dependencies = [
    "mcp>=1.12.1",
    "openai>=1.97.1",
    "graphiti-core>=0.18.0",
    "azure-identity>=1.23.1",
    "starlette>=0.37.0",
    "uvicorn>=0.29.0",
    "fastapi>=0.109.0",
    "httpx>=0.27.0",
    "aiohttp>=3.12.14",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.3.0",
    "pyright>=1.1.0",
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.14.0",
    "pytest-cov>=5.0.0",
    "black>=24.0.0",
    "mypy>=1.12.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["."]
include = [
    "src/graphiti_mcp_server.py",
    "README.md",
    "pyproject.toml",
]

[tool.ruff]
target-version = "py313"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pyright]
include = ["."]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    ".venv",
    ".git",
]
pythonVersion = "3.13"
pythonPlatform = "Darwin"
typeCheckingMode = "basic"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
]
asyncio_mode = "auto"
